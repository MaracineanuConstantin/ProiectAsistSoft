version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
    depends_on:
      - api-gateway
    networks:
      - app-network

  api-gateway:
    build: ./api-gateway
    ports:
      - "8000:8000"
    environment:
      API_GATEWAY_PORT: 8000 # Portul intern al containerului
      MS1_SERVICE_URL: http://microservice1:3001
      MS2_SERVICE_URL: http://microservice2:3002
    depends_on:
      auth-service:
        condition: service_started # Sau service_healthy dacă auth-service are healthcheck
      microservice1:
        condition: service_started # API Gateway poate porni, dar va da erori dacă MS1 nu e gata
      microservice2:
        condition: service_started # Idem pentru MS2
    networks:
      - app-network

  auth-service:
    build: ./auth-service
    ports:
      - "4500:4500"
    networks:
      - app-network

  microservice1:
    build: ./microservice1
    ports:
      - "3001:3001"
      - "50051:50051"
    environment:
      MS1_HTTP_PORT: 3001
      MS1_GRPC_PORT: 50051
      MS2_SERVICE_URL: http://microservice2:3002
      RABBITMQ_SERVICE_URL: amqp://guest:guest@rabbitmq:5672
    depends_on: # MS1 depinde doar de RabbitMQ pentru a porni
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  microservice2:
    build: ./microservice2
    ports:
      - "3002:3002"
    environment:
      MS2_HTTP_PORT: 3002
      MS1_GRPC_SERVICE_ADDRESS: microservice1:50051
      RABBITMQ_SERVICE_URL: amqp://guest:guest@rabbitmq:5672
    depends_on: # MS2 depinde doar de RabbitMQ pentru a porni
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_NODENAME: rabbit@rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/ # Aici referențiem volumul
    healthcheck: # Adăugat pentru a permite `condition: service_healthy`
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  rabbitmq_data: {}